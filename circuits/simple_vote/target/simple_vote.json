{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":18441732903556650463,"abi":{"parameters":[{"name":"voter_secret","type":{"kind":"field"},"visibility":"private"},{"name":"vote","type":{"kind":"field"},"visibility":"private"},{"name":"vote_hash","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9WZXY7aMBDHJyQBAstCl9172EmA5I2H7UN7i3xKfamqqgfYi7dqUjwwmTWLtBlL25EiG9v8/PcwGTvBg5Ntu+uTqQfd5XXXBF6bZ8qjKdU4054cS1nkSrFj6ovAlCE6xDdl3/GbCfAdOixR+zRtDnGjE12oOC+znUp35T7Tmd5luzrOkqTJ0uyQl/lB5TpNGt3u8qRpTxYIsFojLJRbowpM8HkANwNwrG7qA50lcXxI+nFZrXRaV3EWx3WZqkoVVdzkqc7bNE6Tqq7KjlnoVrVFlbfZiUX1Tl0KnsLl7pQSPxUM0pngel35cGbhjvXhDGSzmfS6wyvrHsudC66bJtQ5vN6FpHegUDhWr+kcy47AzU4prXPxfp0xb+i1PcBlx0Wtf0zdI/WI1Bemjt9bdtddd6266960Y5/tlAPMJ2qc6bf8rcaZXoKbuDgb32jGBsjkP1i89E2xfr9OzRtu3RTRlfoahjfFBk5H/p61Je3Xfnc1zrQv6M8NyG44tmSACQbbse6TMVj/asqIcXAzOwr5MCJcaX6m0n0EQxPWn0SE6YAfIz9ww/93wOvt+WXIBzavz8bx7/S2gmGM0THYR+Pxs+nrD0X3cKmvTT1iPBexQTVJ+3Zr0Y9zLc1an9laqe/lXiXsK1scyfGTAvmhG/058qdO+IcS+TM3/Br5czf+Ocdy5IbfIH/hhB+f89zSjf4d8u/c8FPkr9zwS8yfmCdxDoBL7liTdrk8prXH5gMY5ilg8y+YVukzg8fmQz3cP5hr0Xcbi9aNpY/nmI1lno1lHhtrIchaCbJCQVYkyLoTZEn6PviguuaCLMmYWAqyfEHWR40vPHfYzoG9HU2pRhpqDSxabbmz9xfGxY+f377/AmYU5BHB+HnC+ujDOh3nX+HBDb5nYfXWByAmpuBlOM/RtKsRdsguf4/4hh/C8GEa2PwhG//FfKaBhGUwQmd76N7jJ0Vb7Iq6TqvigfF74w8iQPxF9Ug/zOKcDvjnh1lqC1Jfsj70QWD5nnfl84SVb43l7bRtZelD5taUVC+uI2LlE+G6eDHz6IZv/a2eSP2RrZP6+yikAXl4z4bw2iasD8fye8aT16e5Ft8yFxrGzCNpQ3/+BVYQ7fwUIQAA","debug_symbols":"5ZfdaoNAEEbfZa+9cHdm9ievUkowiQmCaDCmUCTvXg1ZSe1i+S7b3Dk6Z2Q8Mo6DOpS762lbNcf2ojZvg6rbfdFXbTNGg8rvpy7nopmiS190vdpo7TNVNofxyPhbpo5VXaqN1bf3TGkUMChAKMAoIChgUcChgE8CbCIgZgGEFGBsBIi/3SH7kUpiH6ls8jnVSCLVOB0eucYRrSdr52Jh7YL8kpzPlXVu/XPy9KrlL9CjfoEekyOAhGOPXq/3GOYeg38qHu7Fk+OCAs9PRZYTLDkv2LsHISJ//5HLf+9xDHZdVdfVabv8oA1KJwf26mvkYMLDREAJk8OEhgkDEwQTDBMCE7BzAzs3sHMDOyfYOcHOCXZOsHOCnRPsnGDnBDsn2DnBzhl2zrBzhp0z7Jxh5ww7Z9g5w84Zds6wc4GdC+xcYOcCOxfYucDOBXYusHOBnQvs3MLOLezcws4t7NwmnXsd/1o8y5IQmLAYcRujj6Kril1dTpvgdPHa7ONiOIb95zleiavjuWv35eHaldMS+bQ/Tp6szxyNZcfSXw==","file_map":{"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"use std::hash::poseidon2;\n\nfn main(voter_secret: Field, vote: Field, vote_hash: pub Field) -> pub Field {\n    let t = vote as u1;\n\n    assert(t | t == 1);\n    let inputs_computed_vote_hash: [Field; 2] = [voter_secret, vote];\n    let computed_vote_hash =\n        poseidon2::Poseidon2::hash(inputs_computed_vote_hash, inputs_computed_vote_hash.len());\n    println(computed_vote_hash);\n    assert(computed_vote_hash == vote_hash);\n    let inputs_nullifier: [Field; 1] = [voter_secret];\n    poseidon2::Poseidon2::hash(inputs_nullifier, inputs_nullifier.len())\n}\n\n#[test]\nfn test_main() {\n    let voter_secret = 1234;\n    let vote = 1;\n    let vote_hash = 9224113572791893596618858998946281077226111653491833695978946049273159598345;\n    let inputs_nullifier: [Field; 1] = [voter_secret];\n    let expected_nullifier = poseidon2::Poseidon2::hash(inputs_nullifier, inputs_nullifier.len());\n    let nullifier = main(voter_secret, vote, vote_hash);\n    println(nullifier);\n    assert(nullifier == expected_nullifier);\n}\n\n#[test(should_fail)]\nfn test_main_fail() {\n    let voter_secret = 1234;\n    let vote = 1;\n    let vote_hash = 9224113572791893596618858998946281077226111653491833695978946049273159598346;\n    let inputs_nullifier: [Field; 1] = [voter_secret];\n    let expected_nullifier = poseidon2::Poseidon2::hash(inputs_nullifier, inputs_nullifier.len());\n    let nullifier = main(voter_secret, vote, vote_hash);\n    println(nullifier);\n    assert(nullifier == expected_nullifier);\n}\n","path":"/Users/lautarodisanza/Documents/noir/first-program/simple_vote/circuits/simple_vote/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_integer_quotient","directive_invert"]}